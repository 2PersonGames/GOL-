using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Net;
using Microsoft.Xna.Framework.Storage;

namespace GOL
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Rectangle viewportRect;
        Rectangle titleSafeAreaRect;

        Texture2D background;

        Objects.GameOfLife GOL;
        const int updateGOLRate = 30;
        int updateCounter = 0;

        long generation = 0;

        //Number of times update is called a second
        const float updateRate = 60f;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            SetResolution(1280, 720);
            //graphics.ToggleFullScreen();

            GOL = new Objects.GameOfLife(Content.Load<Texture2D>("Sprites\\square"), Content.Load<Texture2D>("Sprites\\grid"), 40, 40, titleSafeAreaRect);
            GOL.Load(0);

            background = Content.Load<Texture2D>("Sprites\\background");

            this.TargetElapsedTime = TimeSpan.FromSeconds(1.0f / updateRate);

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)
            {
                this.Exit();
            }

            if (updateCounter >= updateGOLRate)
            {
                GOL.Update();
                generation++;
                updateCounter = 0;
            }
            else
            {
                updateCounter++;
            }

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.DarkBlue);
            spriteBatch.Begin(SpriteBlendMode.AlphaBlend);
            spriteBatch.Draw(background, viewportRect, Color.White);

            GOL.Draw(spriteBatch);

            spriteBatch.End();
        }

        void SetResolution(int nWidth, int nHeight)
        {
            //Change resolution
            graphics.PreferredBackBufferWidth = nWidth;
            graphics.PreferredBackBufferHeight = nHeight;
            graphics.ApplyChanges();

            viewportRect = new Rectangle(0, 0, nWidth, nHeight);
            titleSafeAreaRect = new Rectangle((int)(nHeight * 0.1f), (int)(nHeight * 0.1f), (int)(nWidth - (nHeight * 0.2f)), (int)(nHeight * 0.8f));
        }
    }
}

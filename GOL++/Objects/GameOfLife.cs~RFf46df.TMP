using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Net;
using Microsoft.Xna.Framework.Storage;

namespace GOL.Objects
{
    class GameOfLife
    {
        //false = dead
        //true = alive
        bool[,] currentGOL;
        public bool[,] CurrentGOL
        {
            get { return currentGOL; }
            set
            {
                for (int i = 0; i < currentGOL.Length; i++)
                {
                    for (int j = 0; j < currentGOL.Length; j++)
                    {
                        currentGOL[i, j] = value[i, j] ;
                    }
                }
            }
        }
        bool[,] previousGOL;
        public bool[,] PreviousGOL
        {
            get { return previousGOL; }
            set
            {
                for (int i = 0; i < Width; i++)
                {
                    for (int j = 0; j < Height; j++)
                    {
                        previousGOL[i, j] = value[i, j];
                    }
                }
            }
        }

        bool initialLoad;
        public bool InitialLoad
        {
            get { return initialLoad; }
            set { initialLoad = value; }
        }

        int height;
        public int Height
        {
            get { return height; }
            set { height = value; }
        }
        int width;
        public int Width
        {
            get { return width; }
            set { width = value; }
        }

        Rectangle drawAreaRect;
        Rectangle drawSquareRect;
        Texture2D aliveSquare;
        public Texture2D AliveSquare
        {
            get { return aliveSquare; }
            set { aliveSquare = value; }
        }

        public GameOfLife(Texture2D nAliveSquare, int nMapWidth, int nMapHeight, Rectangle viewportRect)
        {
            //Instance code
            AliveSquare = nAliveSquare;
            InitialLoad = false;

            currentGOL = new bool[nMapWidth, nMapHeight];
            previousGOL = new bool[nMapWidth, nMapHeight];

            Height = nMapHeight;
            Width = nMapWidth;

            drawAreaRect = new Rectangle(viewportRect.Width - viewportRect.Height, 0, viewportRect.Height, viewportRect.Height);
            drawSquareRect = new Rectangle(drawAreaRect.X, drawAreaRect.Y, drawAreaRect.Width / Width, drawAreaRect.Height / Height);
        }

        public void Load(int gOLVersion)
        {
            //Code for different setups
            switch (gOLVersion)
            {
                default:
                    {
                        //Test version
                        currentGOL[0, 0] = true;
                        currentGOL[0, 1] = true;
                        currentGOL[1, 0] = true;
                        currentGOL[1, 1] = true;
                        currentGOL[1, 2] = true;
                        break;
                    }
                case 0:
                    {
                        break;
                    }
            }
        }

        public void Update()
        {
            if (InitialLoad)
            {
                //Update code
                //First thing, make a copy of the current game state
                PreviousGOL = CurrentGOL;

                //Apply rules
                for (int i = 0; i < Width; i++)
                {
                    for (int j = 0; j < Height; j++)
                    {
                        ApplyRules(i, j);
                    }
                }
            }
            else
            {
                Load(0);
                //InitialLoad = true;
            }
        }

        public void Draw(SpriteBatch spriteBatch)
        {
            //Drawing code
            for (int i = 0; i < Width; i++)
            {
                for (int j = 0; j < Height; j++)
                {
                    if (currentGOL[i, j])
                    {
                        drawSquareRect.Y = drawSquareRect.Height * j;
                        drawSquareRect.X = (drawSquareRect.Width * i) + drawAreaRect.X;
                        spriteBatch.Draw(AliveSquare, drawSquareRect, Color.White);
                    }
                }
            }
        }

        void ApplyRules(int row, int column)
        {
            int aliveNeighbours = 0;

            if (row > 0 && previousGOL[row - 1, column])
            {
                aliveNeighbours++;
            }
            if (column > 0 && row > 0 && previousGOL[row - 1, column - 1])
            {
                aliveNeighbours++;
            }
            if (column > 0 && previousGOL[row, column - 1])
            {
                aliveNeighbours++;
            }
            if (column > 0 && row < Width - 1 && previousGOL[row + 1, column - 1])
            {
                aliveNeighbours++;
            }
            if (column < Height - 1 && row < Width - 1 && previousGOL[row + 1, column])
            {
                aliveNeighbours++;
            }
            if (column < Height - 1 && row < Width - 1 && previousGOL[row + 1, column + 1])
            {
                aliveNeighbours++;
            }
            if (column < Height - 1 && previousGOL[row, column + 1])
            {
                aliveNeighbours++;
            }
            if (column < Height - 1 && row > 0 && previousGOL[row - 1, column + 1])
            {
                aliveNeighbours++;
            }

            if (previousGOL[row, column])
            {
                if (aliveNeighbours < 2)
                {
                    //Dies of loneliness
                    currentGOL[row, column] = false;
                }
                else if (aliveNeighbours > 3)
                {
                    //Dies of overcrowding
                    currentGOL[row, column] = false;
                }
            }
            else if (aliveNeighbours == 3)
            {
                //Resurrect
                currentGOL[row, column] = true;
            }
        }
    }
}
